Clustering of weights: local minima (throw away the rest of the clusters if one is clearly best or merge clusters and try to re-train)
Run more iterations between merging
Data distribution problem
-Idea 1: have each segment get all data, run diff. epochs on diff. segments to parallelize that way (kinda defeats the purpose tho)
-Fundamentally it's a data problem: each segment does not have enough data to train adequately and find the right minima/optima, so weights are too dissimilar and averaging can't be done reliably
-Data augmentation is a solution? Flip each image across vertical axis, that doubles your dataset on each segment

#2 ideas: 1) add lotsa data to each segment, train 10 segments, merge, see what happens; 2) figure out how to average better to achieve better spatial distribution in plot

So the problem seems to be with the scale of the weights after averaging: they are scaled down, which significantly impacts performance
-Scaling the weights down reduces accuracy, while scaling the weights up increases accuracy (it's a direct correlation)
